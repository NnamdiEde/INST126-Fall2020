{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_ _ _ _ _ _ _ _ Enter your letter pleaseW\n",
      "Sorry you got it wrong my guy\n",
      "_ _ _ _ _ _ _ _ Enter your letter pleaseE\n",
      "Sorry you got it wrong my guy\n",
      "_ _ _ _ _ _ _ _ Enter your letter pleaseO\n",
      "Congrats, you guessed the correct letter\n",
      "_ _ _ _ O _ O _ Enter your letter pleaseT\n",
      "Congrats, you guessed the correct letter\n",
      "T _ _ _ O _ O _ Enter your letter pleaseS\n",
      "Congrats, you guessed the correct letter\n",
      "T S _ _ O _ O _ Enter your letter pleaseV\n",
      "Congrats, you guessed the correct letter\n",
      "T S V _ O _ O _ Enter your letter pleaseF\n",
      "Congrats, you guessed the correct letter\n",
      "T S V _ O _ O F Enter your letter pleaseM\n",
      "Congrats, you guessed the correct letter\n",
      "T S V M O _ O F Enter your letter pleaseN\n",
      "Sorry you got it wrong my guy\n",
      "T S V M O _ O F Enter your letter pleaseH\n",
      "Congrats, you guessed the correct letter\n",
      "T S V M O H O F "
     ]
    }
   ],
   "source": [
    "import random\n",
    "def printfriend(lis):\n",
    "    for letter in lis:\n",
    "       print(letter + \" \", end=\"\")\n",
    "    return\n",
    "    \n",
    "\n",
    "words = ['WHDSPQZ', 'XHO', 'TTDBFRT', 'QQJYF', 'ENQD', 'DNPK', 'CNTR', 'EHWHOD', 'TSVMOHOF', 'XNOCFQGTM']\n",
    "correct_guess = random.choice(words)\n",
    "user_guess= \"_\"*len(correct_guess)\n",
    "printfriend(user_guess)\n",
    "num_guess= 10\n",
    "while num_guess> 0 and correct_guess!= user_guess :\n",
    "    guess = input(\"Enter your letter please\")\n",
    "    if guess in correct_guess:\n",
    "      print(\"Congrats, you guessed the correct letter\")\n",
    "      for index in range(len(correct_guess)):\n",
    "        if(guess == correct_guess[index]):\n",
    "         user_guess = user_guess[:index] + guess + user_guess[index + 1:]\n",
    "     \n",
    "    else:\n",
    "        print(\"Sorry you got it wrong my guy\")\n",
    "        num_guess= num_guess-1\n",
    "    printfriend(user_guess)\n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "            \n",
    "         \n",
    "         \n",
    "        \n",
    "        \n",
    "        \n",
    "\n",
    "\n",
    "\n",
    "        \n",
    "        \n",
    "        \n",
    "    \n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}